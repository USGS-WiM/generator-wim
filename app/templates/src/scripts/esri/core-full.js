// Generated by Web Inormatics and Mapping on <%= (new Date).toISOString().split('T')[0] %> using <%= generatorInfo.name %> <%= generatorInfo.version %>

require([
    'esri/dijit/Legend',
    'esri/tasks/locator',
    'esri/tasks/query',
    'esri/tasks/QueryTask',
    'esri/graphicsUtils',
    'esri/geometry/Point',
    'esri/geometry/Extent',
    'esri/layers/ArcGISDynamicMapServiceLayer',
    'esri/layers/FeatureLayer',
    'esri/SpatialReference',
    'esri/layers/WMSLayer',
    'esri/layers/WMSLayerInfo',
    'dijit/form/CheckBox',
    'dijit/form/RadioButton',
    'esri/geometry/webMercatorUtils',
    'dojo/query',
    'dojo/dom',
    'dojo/dom-class',
    'dojo/dom-construct',
    'dojo/dom-style',
    'dojo/on'
], function(
    Legend,
    Locator,
    Query,
    QueryTask,
    graphicsUtils,
    Point,
    Extent,
    ArcGISDynamicMapServiceLayer,
    FeatureLayer,
    SpatialReference,
    WMSLayer,
    WMSLayerInfo,
    CheckBox,
    RadioButton,
    webMercatorUtils,
    query,
    dom,
    domClass,
    domConstruct,
    domStyle,
    on
) {

    var legendLayers = [];
    var layersObject = [];
    var layerArray = [];
    var staticLegendImage;
    var identifyTask, identifyParams;
    var navToolbar;
    var locator;

    //displays map scale on map load
    app.map.on("load", function() {
        var scale =  app.map.getScale().toFixed(0);
        $('#scale')[0].innerHTML = addCommas(scale);
        var initMapCenter = webMercatorUtils.webMercatorToGeographic(app.map.extent.getCenter());
        $('#latitude').html(initMapCenter.y.toFixed(3));
        $('#longitude').html(initMapCenter.x.toFixed(3));
    });

    //displays map scale on scale change (i.e. zoom level)
    on(app.map, 'zoom-end', function () {
        var scale =  app.map.getScale().toFixed(0);
        $('#scale')[0].innerHTML = addCommas(scale);
    });

    //updates lat/lng indicator on mouse move. does not apply on devices w/out mouse. removes 'map center' label
    on(app.map, 'mouse-move', function (cursorPosition) {
        $('#mapCenterLabel').css('display', 'none');
        if (cursorPosition.mapPoint != null) {
            var geographicMapPt = webMercatorUtils.webMercatorToGeographic(cursorPosition.mapPoint);
            $('#latitude').html(geographicMapPt.y.toFixed(3));
            $('#longitude').html(geographicMapPt.x.toFixed(3));
        }
    });
    //updates lat/lng indicator to map center after pan and shows 'map center' label.
    on(app.map, 'pan-end', function () {
        //displays latitude and longitude of map center
        $('#mapCenterLabel').css('display', 'inline');
        var geographicMapCenter = webMercatorUtils.webMercatorToGeographic(app.map.extent.getCenter());
        $('#latitude').html(geographicMapCenter.y.toFixed(3));
        $('#longitude').html(geographicMapCenter.x.toFixed(3));
    });

    //create global layers lookup
    var mapLayers = [];

    $.each(app.allLayers, function (index,group) {
        console.log('processing: ', group.groupHeading)


        //sub-loop over layers within this groupType
        $.each(group.layers, function (layerName,layerDetails) {

            //check for exclusiveGroup for this layer
            var exclusiveGroupName = '';
            if (layerDetails.wimOptions.exclusiveGroupName) {
                exclusiveGroupName = layerDetails.wimOptions.exclusiveGroupName;
            }

            if (layerDetails.wimOptions.layerType === 'agisFeature') {
                var layer = new FeatureLayer(layerDetails.url, layerDetails.options);
                //check if include in legend is true
                if (layerDetails.wimOptions && layerDetails.wimOptions.includeLegend == true){
                    legendLayers.push({layer:layer, title: layerName});
                }
                addLayer(group.groupHeading, group.showGroupHeading, layer, layerName, exclusiveGroupName, layerDetails.options, layerDetails.wimOptions);
                //addMapServerLegend(layerName, layerDetails);
            }

            else if (layerDetails.wimOptions.layerType === 'agisWMS') {
                var layer = new WMSLayer(layerDetails.url, {resourceInfo: layerDetails.options.resourceInfo, visibleLayers: layerDetails.options.visibleLayers }, layerDetails.options);
                //check if include in legend is true
                if (layerDetails.wimOptions && layerDetails.wimOptions.includeLegend == true){
                    legendLayers.push({layer:layer, title: layerName});
                }
                //app.map.addLayer(layer);
                addLayer(group.groupHeading, group.showGroupHeading, layer, layerName, exclusiveGroupName, layerDetails.options, layerDetails.wimOptions);
                //addMapServerLegend(layerName, layerDetails);
            }

            else if (layerDetails.wimOptions.layerType === 'agisDynamic') {
                var layer = new ArcGISDynamicMapServiceLayer(layerDetails.url, layerDetails.options);
                //check if include in legend is true
                if (layerDetails.wimOptions && layerDetails.wimOptions.includeLegend == true){
                    legendLayers.push({layer:layer, title: layerName});
                }
                if (layerDetails.visibleLayers) {
                    layer.setVisibleLayers(layerDetails.visibleLayers);
                }
                //app.map.addLayer(layer);
                addLayer(group.groupHeading, group.showGroupHeading, layer, layerName, exclusiveGroupName, layerDetails.options, layerDetails.wimOptions);
                //addMapServerLegend(layerName, layerDetails);
            }
        });
    });

    function addLayer(groupHeading, showGroupHeading, layer, layerName, exclusiveGroupName, options, wimOptions) {

        //add layer to map
        //layer.addTo(map);
        app.map.addLayer(layer);

        //add layer to layer list
        mapLayers.push([exclusiveGroupName,camelize(layerName),layer]);

        //check if its an exclusiveGroup item
        if (exclusiveGroupName) {

            if (!$('#' + camelize(exclusiveGroupName)).length) {
                var exGroupRoot = $('<div id="' + camelize(exclusiveGroupName +" Root") + '" class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <button type="button" class="btn btn-default active" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + exclusiveGroupName + '</button> </div>');

                exGroupRoot.click(function(e) {
                    exGroupRoot.find('i.glyphspan').toggleClass('fa-check-square-o fa-square-o');

                    $.each(mapLayers, function (index, currentLayer) {

                        var tempLayer = app.map.getLayer(currentLayer[2].id);

                        if (currentLayer[0] == exclusiveGroupName) {
                            if ($('#' + currentLayer[1]).find('i.glyphspan').hasClass('fa-dot-circle-o') && exGroupRoot.find('i.glyphspan').hasClass('fa-check-square-o')) {
                                console.log('adding layer: ',currentLayer[1]);
                                app.map.addLayer(currentLayer[2]);
                                var tempLayer = app.map.getLayer(currentLayer[2].id);
                                tempLayer.setVisibility(true);
                            } else if (exGroupRoot.find('i.glyphspan').hasClass('fa-square-o')) {
                                console.log('removing layer: ',currentLayer[1]);
                                app.map.removeLayer(currentLayer[2]);
                            }
                        }

                    });
                });

                var exGroupDiv = $('<div id="' + camelize(exclusiveGroupName) + '" class="btn-group-vertical" data-toggle="buttons"></div');
                $('#toggle').append(exGroupDiv);
            }

            //create radio button
            //var button = $('<input type='radio' name='' + camelize(exclusiveGroupName) + '' value='' + camelize(layerName) + ''checked>' + layerName + '</input></br>');
            if (layer.visible) {
                var button = $('<div id="' + camelize(layerName) + '" class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <label class="btn btn-default"  style="font-weight: bold;text-align: left"> <input type="radio" name="' + camelize(exclusiveGroupName) + '" autocomplete="off"><i class="glyphspan fa fa-dot-circle-o ' + camelize(exclusiveGroupName) + '"></i>&nbsp;&nbsp;' + layerName + '</label> </div>');
            } else {
                var button = $('<div id="' + camelize(layerName) + '" class="btn-group-vertical lyrTog" style="cursor: pointer;" data-toggle="buttons"> <label class="btn btn-default"  style="font-weight: bold;text-align: left"> <input type="radio" name="' + camelize(exclusiveGroupName) + '" autocomplete="off"><i class="glyphspan fa fa-circle-o ' + camelize(exclusiveGroupName) + '"></i>&nbsp;&nbsp;' + layerName + '</label> </div>');
            }

            $('#' + camelize(exclusiveGroupName)).append(button);

            //click listener for radio button
            button.click(function(e) {

                if ($(this).find('i.glyphspan').hasClass('fa-circle-o')) {
                    $(this).find('i.glyphspan').toggleClass('fa-dot-circle-o fa-circle-o');

                    var newLayer = $(this)[0].id;

                    $.each(mapLayers, function (index, currentLayer) {

                        if (currentLayer[0] == exclusiveGroupName) {
                            if (currentLayer[1] == newLayer && $('#' + camelize(exclusiveGroupName + ' Root')).find('i.glyphspan').hasClass('fa-check-square-o')) {
                                console.log('adding layer: ',currentLayer[1]);
                                app.map.addLayer(currentLayer[2]);
                                var tempLayer = app.map.getLayer(currentLayer[2].id);
                                tempLayer.setVisibility(true);
                                //$('#' + camelize(currentLayer[1])).toggle();
                            }
                            else if (currentLayer[1] == newLayer && $('#' + camelize(exclusiveGroupName + ' Root')).find('i.glyphspan').hasClass('fa-square-o')) {
                                console.log('groud heading not checked');
                            }
                            else {
                                console.log('removing layer: ',currentLayer[1]);
                                app.map.removeLayer(currentLayer[2]);
                                if ($('#' + currentLayer[1]).find('i.glyphspan').hasClass('fa-dot-circle-o')) {
                                    $('#' + currentLayer[1]).find('i.glyphspan').toggleClass('fa-dot-circle-o fa-circle-o');
                                }
                                //$('#' + camelize(this[1])).toggle();
                            }
                        }
                    });
                }
            });
        }

        //not an exclusive group item
        else {

            //create layer toggle
            //var button = $('<div align="left" style="cursor: pointer;padding:5px;"><span class="glyphspan glyphicon glyphicon-check"></span>&nbsp;&nbsp;' + layerName + '</div>');
            if (layer.visible && wimOptions.hasOpacitySlider !== undefined && wimOptions.hasOpacitySlider == true && wimOptions.hasZoomto !== undefined && wimOptions.hasZoomto == true) {
                //opacity icon and zoomto icon; button selected
                var button = $('<div class="btn-group-vertical lyrTogDiv" style="cursor: pointer;" data-toggle="buttons"> <button id="' + layer.id + '"type="button" class="btn btn-default active" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="opacity' + camelize(layerName) + '" class="glyphspan glyphicon glyphicon-adjust pull-right opacity"></span><span class="glyphicon glyphicon-search pull-right zoomto"></span></button></div>');
            } else if (!layer.visible && wimOptions.hasOpacitySlider !== undefined && wimOptions.hasOpacitySlider == true && wimOptions.hasZoomto !== undefined && wimOptions.hasZoomto == true){
                //opacity icon and zoomto icon; button not selected
                var button = $('<div class="btn-group-vertical lyrTogDiv" style="cursor: pointer;" data-toggle="buttons"> <button id="' + layer.id + '"type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="opacity' + camelize(layerName) + '" class="glyphspan glyphicon glyphicon-adjust pull-right opacity"></span><span class="glyphicon glyphicon-search pull-right zoomto"></span></button></div>');
            } else if (layer.visible && wimOptions.hasOpacitySlider !== undefined && wimOptions.hasOpacitySlider == true) {
                //opacity icon only; button selected
                var button = $('<div class="btn-group-vertical lyrTogDiv" style="cursor: pointer;" data-toggle="buttons"> <button id="' + layer.id + '"type="button" class="btn btn-default active" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="opacity' + camelize(layerName) + '" class="glyphspan glyphicon glyphicon-adjust pull-right"></button></div>');
            } else if (!layer.visible && wimOptions.hasOpacitySlider !== undefined && wimOptions.hasOpacitySlider == true) {
                //opacity icon only; button not selected
                var button = $('<div class="btn-group-vertical lyrTogDiv" style="cursor: pointer;" data-toggle="buttons"> <button id="' + layer.id + '"type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-square-o"></i>&nbsp;&nbsp;' + layerName + '<span id="opacity' + camelize(layerName) + '" class="glyphspan glyphicon glyphicon-adjust pull-right"></button></div>');
            } else if (layer.visible && wimOptions.hasOpacitySlider == false && wimOptions.hasZoomto !== undefined && wimOptions.hasZoomto == true){
                //zoomto icon only; button selected
                var button = $('<div class="btn-group-vertical lyrTogDiv" style="cursor: pointer;" data-toggle="buttons"> <button id="' + layer.id + '"type="button" class="btn btn-default active" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + layerName + '<span class="glyphicon glyphicon-search pull-right zoomto"></span></button></span></div>');
            } else if (!layer.visible && wimOptions.hasOpacitySlider == false && wimOptions.hasZoomto !== undefined && wimOptions.hasZoomto == true) {
                //zoomto icon only; button not selected
                var button = $('<div class="btn-group-vertical lyrTogDiv" style="cursor: pointer;" data-toggle="buttons"> <button id="' + layer.id + '"type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-square-o"></i>&nbsp;&nbsp;' + layerName + '<span class="glyphicon glyphicon-search pull-right zoomto"></span></button></span></div>');
            } else if(layer.visible) {
                //no icons; button selected
                var button = $('<div class="btn-group-vertical lyrTogDiv" style="cursor: pointer;" data-toggle="buttons"> <button id="' + layer.id + '"type="button" class="btn btn-default active" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-check-square-o"></i>&nbsp;&nbsp;' + layerName + '</button></span></div>');
            } else {
                //no icons; button not selected
                var button = $('<div class="btn-group-vertical lyrTogDiv" style="cursor: pointer;" data-toggle="buttons"> <button id="' + layer.id + '"type="button" class="btn btn-default" aria-pressed="true" style="font-weight: bold;text-align: left"><i class="glyphspan fa fa-square-o"></i>&nbsp;&nbsp;' + layerName + '</button> </div>');
            }

            //click listener for regular
            button.click(function(e) {

                //toggle checkmark
                $(this).find('i.glyphspan').toggleClass('fa-check-square-o fa-square-o');
                $(this).find('button').button('toggle');

                e.preventDefault();
                e.stopPropagation();

                $('#' + camelize(layerName)).toggle();

                //layer toggle
                if (layer.visible) {
                    layer.setVisibility(false);
                } else {
                    layer.setVisibility(true);
                }

            });
        }

        //group heading logic
        if (showGroupHeading) {

            //camelize it for divID
            var groupDivID = camelize(groupHeading);

            //check to see if this group already exists
            if (!$('#' + groupDivID).length) {
                //if it doesn't add the header
                var groupDiv = $('<div id="' + groupDivID + '"><div class="alert alert-info" role="alert"><strong>' + groupHeading + '</strong></div></div>');
                $('#toggle').append(groupDiv);
            }

            //if it does already exist, append to it

            if (exclusiveGroupName) {
                //if (!exGroupRoot.length)$('#slider'+camelize(layerName))
                $('#' + groupDivID).append(exGroupRoot);
                $('#' + groupDivID).append(exGroupDiv);
            } else {
                $('#' + groupDivID).append(button);
                //begin opacity slider logic
                if ($('#opacity'+camelize(layerName)).length > 0) {
                    $('#opacity'+camelize(layerName)).hover(function () {
                        $('.opacitySlider').remove();
                        var currOpacity = app.map.getLayer(options.id).opacity;
                        var slider = $('<div class="opacitySlider"><label id="opacityValue">Opacity: ' + currOpacity + '</label><label class="opacityClose pull-right">X</label><input id="slider" type="range"></div>');
                        $("body").append(slider);[0]

                        $('#slider')[0].value = currOpacity*100;
                        $('.opacitySlider').css('left', event.clientX-180);
                        $('.opacitySlider').css('top', event.clientY-50);

                        $('.opacitySlider').mouseleave(function() {
                            $('.opacitySlider').remove();
                        });

                        $('.opacityClose').click(function() {
                            $('.opacitySlider').remove();
                        });
                        $('#slider').change(function(event) {
                            //get the value of the slider with this call
                            var o = ($('#slider')[0].value)/100;
                            console.log('o: ' + o);
                            $('#opacityValue').html('Opacity: ' + o)
                            app.map.getLayer(options.id).setOpacity(o);
                            //here I am just specifying the element to change with a 'made up' attribute (but don't worry, this is in the HTML specs and supported by all browsers).
                            //var e = '#' + $(this).attr('data-wjs-element');
                            //$(e).css('opacity', o)
                        });
                    });
                }
                //end opacity slider logic

                //begin zoomto logic (in progress)
                $('.zoomto').hover(function (e) {

                    $('.zoomDialog').remove();
                    var layerToChange = this.parentNode.id;
                    var zoomDialog = $('<div class="zoomDialog"><label class="zoomClose pull-right">X</label><br><div class="list-group"><a href="#" id="zoomscale" class="list-group-item lgi-zoom zoomscale">Zoom to scale</a> <a id="zoomcenter" href="#" class="list-group-item lgi-zoom zoomcenter">Zoom to center</a><a id="zoomextent" href="#" class="list-group-item lgi-zoom zoomextent">Zoom to extent</a></div></div>');

                    $('body').append(zoomDialog);

                    $('.zoomDialog').css('left', event.clientX-80);
                    $('.zoomDialog').css('top', event.clientY-5);

                    $('.zoomDialog').mouseleave(function() {
                        $('.zoomDialog').remove();
                    });

                    $('.zoomClose').click(function() {
                        $('.zoomDialog').remove();
                    });

                    $('#zoomscale').click(function (e) {
                        //logic to zoom to layer scale
                        var layerMinScale = app.map.getLayer(layerToChange).minScale;
                        app.map.setScale(layerMinScale);
                    });

                    $('#zoomcenter').click(function (e){
                        //logic to zoom to layer center
                        //var layerCenter = app.map.getLayer(layerToChange).fullExtent.getCenter();
                        //app.map.centerAt(layerCenter);
                        var dataCenter = new Point(defaultMapCenter, new SpatialReference({wkid:4326}));
                        app.map.centerAt(dataCenter);

                    });

                    $('#zoomextent').click(function (e){
                        //logic to zoom to layer extent
                        var layerExtent = app.map.getLayer(layerToChange).fullExtent;
                        app.map.setExtent(layerExtent);
                    });
                });
                //end zoomto logic

            }
        }

        else {
            //otherwise append
            $('#toggle').append(button);
        }
    }

    // User Guide Modal

    $('#userGuideButton').click(function(){
        $('#userGuideModal').modal('show');
    });

    // FAQ Modal

    $('#faqButton').click(function(){
        $('#faqModal').modal('show');
    });


    //get visible and non visible layer lists
    function addMapServerLegend(layerName, layerDetails) {


        if (layerDetails.wimOptions.layerType === 'agisFeature') {

            //for feature layer since default icon is used, put that in legend
            var legendItem = $('<div align="left" id="' + camelize(layerName) + '"><img alt="Legend Swatch" src="https://raw.githubusercontent.com/Leaflet/Leaflet/master/dist/images/marker-icon.png" /><strong>&nbsp;&nbsp;' + layerName + '</strong></br></div>');
            $('#legendDiv').append(legendItem);

        }

        else if (layerDetails.wimOptions.layerType === 'agisWMS') {

            //for WMS layers, for now just add layer title
            var legendItem = $('<div align="left" id="' + camelize(layerName) + '"><img alt="Legend Swatch" src="https://placehold.it/25x41" /><strong>&nbsp;&nbsp;' + layerName + '</strong></br></div>');
            $('#legendDiv').append(legendItem);

        }

        else if (layerDetails.wimOptions.layerType === 'agisDynamic') {

            //create new legend div
            var legendItemDiv = $('<div align="left" id="' + camelize(layerName) + '"><strong>&nbsp;&nbsp;' + layerName + '</strong></br></div>');
            $('#legendDiv').append(legendItemDiv);

            //get legend REST endpoint for swatch
            $.getJSON(layerDetails.url + '/legend?f=json', function (legendResponse) {

                console.log(layerName,'legendResponse',legendResponse);



                //make list of layers for legend
                if (layerDetails.options.layers) {
                    //console.log(layerName, 'has visisble layers property')
                    //if there is a layers option included, use that
                    var visibleLayers = layerDetails.options.layers;
                }
                else {
                    //console.log(layerName, 'no visible layers property',  legendResponse)

                    //create visibleLayers array with everything
                    var visibleLayers = [];
                    $.grep(legendResponse.layers, function(i,v) {
                        visibleLayers.push(v);
                    });
                }

                //loop over all map service layers
                $.each(legendResponse.layers, function (i, legendLayer) {

                    //var legendHeader = $('<strong>&nbsp;&nbsp;' + legendLayer.layerName + '</strong>');
                    //$('#' + camelize(layerName)).append(legendHeader);

                    //sub-loop over visible layers property
                    $.each(visibleLayers, function (i, visibleLayer) {

                        //console.log(layerName, 'visibleLayer',  visibleLayer);

                        if (visibleLayer == legendLayer.layerId) {

                            console.log(layerName, visibleLayer,legendLayer.layerId, legendLayer)

                            //console.log($('#' + camelize(layerName)).find('<strong>&nbsp;&nbsp;' + legendLayer.layerName + '</strong></br>'))

                            var legendHeader = $('<strong>&nbsp;&nbsp;' + legendLayer.layerName + '</strong></br>');
                            $('#' + camelize(layerName)).append(legendHeader);

                            //get legend object
                            var feature = legendLayer.legend;
                            /*
                                //build legend html for categorized feautres
                                if (feature.length > 1) {
                                */

                            //placeholder icon
                            //<img alt='Legend Swatch' src='http://placehold.it/25x41' />

                            $.each(feature, function () {

                                //make sure there is a legend swatch
                                if (this.imageData) {
                                    var legendFeature = $('<img alt="Legend Swatch" src="data:image/png;base64,' + this.imageData + '" /><small>' + this.label.replace('<', '').replace('>', '') + '</small></br>');

                                    $('#' + camelize(layerName)).append(legendFeature);
                                }
                            });
                            /*
                                }
                                //single features
                                else {
                                var legendFeature = $('<img alt='Legend Swatch' src='data:image/png;base64,' + feature[0].imageData + '' /><small>&nbsp;&nbsp;' + legendLayer.layerName + '</small></br>');

                                //$('#legendDiv').append(legendItem);
                                $('#' + camelize(layerName)).append(legendFeature);

                                }
                                */
                        }
                    }); //each visible layer
                }); //each legend item
            }); //get legend json
        }
    }
    /* parse layers.js */

    var legend = new Legend({
        map: app.map,
        layerInfos: legendLayers
    }, 'legendDiv');
    legend.startup();

    
        // FAQ Modal controls.
    $('#faq1header').click(function(){$('#faq1body').slideToggle(250);});
    $('#faq2header').click(function(){$('#faq2body').slideToggle(250);});
    $('#faq3header').click(function(){$('#faq3body').slideToggle(250);});
    $('#faq4header').click(function(){$('#faq4body').slideToggle(250);});
    $('#faq5header').click(function(){$('#faq5body').slideToggle(250);});
    $('#faq6header').click(function(){$('#faq6body').slideToggle(250);});
    $('#faq7header').click(function(){$('#faq7body').slideToggle(250);});
    $('#faq8header').click(function(){$('#faq8body').slideToggle(250);});
    $('#faq9header').click(function(){$('#faq9body').slideToggle(250);});
    $('#faq10header').click(function(){$('#faq10body').slideToggle(250);});
    $('#faq11header').click(function(){$('#faq11body').slideToggle(250);});
    $('#faq12header').click(function(){$('#faq12body').slideToggle(250);});
    $('#faq13header').click(function(){$('#faq13body').slideToggle(250);});
    $('#faq14header').click(function(){$('#faq14body').slideToggle(250);});
    $('#faq15header').click(function(){$('#faq15body').slideToggle(250);});
    $('#faq16header').click(function(){$('#faq16body').slideToggle(250);});
    $('#faq17header').click(function(){$('#faq17body').slideToggle(250);});
    $('#faq18header').click(function(){$('#faq18body').slideToggle(250);});
    $('#faq19header').click(function(){$('#faq19body').slideToggle(250);});
    $('#faq20header').click(function(){$('#faq20body').slideToggle(250);});
    $('#faq21header').click(function(){$('#faq21body').slideToggle(250);});
    $('#faq22header').click(function(){$('#faq22body').slideToggle(250);});
    $('#faq23header').click(function(){$('#faq23body').slideToggle(250);});
    $('#faq24header').click(function(){$('#faq24body').slideToggle(250);});
    $('#faq25header').click(function(){$('#faq25body').slideToggle(250);});
    $('#faq26header').click(function(){$('#faq26body').slideToggle(250);});
    $('#faq27header').click(function(){$('#faq27body').slideToggle(250);});
    $('#faq28header').click(function(){$('#faq28body').slideToggle(250);});

});//end of require statement containing legend building code